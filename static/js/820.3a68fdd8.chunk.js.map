{"version":3,"file":"static/js/820.3a68fdd8.chunk.js","mappings":"qPAGaA,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGF,EAAOG,KAAI,SAAAC,GAAK,OACf,yBACE,SAAC,KAAD,CAAqBC,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAvD,SACGG,EAAMK,gBADEL,EAAME,KADVF,EAAME,GADA,KAStB,E,SCgBD,EA5Be,WAAO,IAAD,EACnB,GAA4BI,EAAAA,EAAAA,UAAS,IAArC,eAAOV,EAAP,KAAeW,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAK,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GAIrCC,EAAiB,mCAAG,sGACLC,MAAM,GAAD,OAJT,4CAIS,oBAHX,mCAGW,YAAkCL,IADlC,cAClBM,EADkB,gBAEIA,EAAKC,OAFT,OAElBC,EAFkB,OAGxBV,EAAUU,EAAcC,SAHA,2CAAH,qDAYvB,OACE,6BACE,kBAAOC,KAAK,OAAOC,MAAOT,EAAOU,SARX,SAAAC,GACxB,IAAMC,EAAQD,EAAIE,OAAOJ,MAEzBV,EAD6B,KAAVa,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAEhD,KAKG,mBAAQE,QAASZ,EAAjB,qBACA,SAAClB,EAAD,CAAYC,OAAQA,MAGzB,C,sBC/BD,SAAS8B,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBb,EAAQc,EAAKd,KAInB,CAHE,MAAOe,GAEP,YADAN,EAAOM,EAET,CAEID,EAAKE,KACPR,EAAQR,GAERiB,QAAQT,QAAQR,GAAOkB,KAAKR,EAAOC,EAEvC,CAEe,SAASQ,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMa,EAAGK,MAAMJ,EAAME,GAEzB,SAASb,EAAMV,GACbM,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQX,EAClE,CAEA,SAASW,EAAOe,GACdpB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASe,EACnE,CAEAhB,OAAMiB,EACR,GACF,CACF,C","sources":["components/MoviesList/MoviesList.js","components/pages/Movies.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movies.map(movie => (\n        <li key={movie.id}>\n          <Link key={movie.id} to={`${movie.id}`} state={{ from: location }}>\n            {movie.original_title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};","import { MoviesList } from 'components/MoviesList/MoviesList';\nimport { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const title = searchParams.get('query') ?? '';\n  const fetchUrl = 'https://api.themoviedb.org/3/search/movie';\n  const apiKey = '93dad7f5c3f08e509beef896c33679a7';\n\n  const handleFetchMovies = async () => {\n    const data = await fetch(`${fetchUrl}?api_key=${apiKey}&${searchParams}`);\n    const moviesFromApi = await data.json();\n    setMovies(moviesFromApi.results);\n  };\n\n  const updateQueryString = evt => {\n    const query = evt.target.value;\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n  };\n\n  return (\n    <main>\n      <input type=\"text\" value={title} onChange={updateQueryString}></input>\n      <button onClick={handleFetchMovies}>Search</button>\n      <MoviesList movies={movies} />\n    </main>\n  );\n};\n\nexport default Movies;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["MoviesList","movies","location","useLocation","map","movie","to","id","state","from","original_title","useState","setMovies","useSearchParams","searchParams","setSearchParams","title","get","handleFetchMovies","fetch","data","json","moviesFromApi","results","type","value","onChange","evt","query","target","onClick","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}